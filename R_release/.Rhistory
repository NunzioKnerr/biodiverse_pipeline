legend.position=c(.5, 0.06),
legend.direction='horizontal',
legend.title = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
legend.text = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
panel.grid = element_blank(),
panel.background=element_blank(),#element_rect(colour = "black", fill="white", size = 1),
#panel.border = element_rect(colour = "black", fill=NA, size = 1),#element_blank(),
#panel.margin=unit(c(0,0,0,0),"line"),
plot.background=element_rect(colour = "black", fill="white", size = 1),
plot.margin=unit(c(0,0,-0.61,-0.61),"line"))
print(p3)
Axis_0 <- "Axis_0"
Axis_1 <- "Axis_1"
sigplot <- "PE_WE_P"
df <- biodiverse_results_concatenated
rounding_digits <- 3
yellowOrangeBrown_colours <- brewer.pal(9, "YlOrBr")
colours <- yellowOrangeBrown_colours
#   Create vectors for legend text using the max and min vaules in the raster and a number in between
#PE_WE.hs <- seq(0,max(biodiverse_results_concatenated[,sigplot]),length.out=5)
#PE_WE.hs.round <- round(PE_WE.hs, digits=rounding_digits)
#PE_WE.hs.round <- c(0,  0.02, 0.04, max(biodiverse_results_concatenated[,sigplot]))#PE_WE version
PE_WE.hs.round <- c(0,  0.002, 0.004, max(biodiverse_results_concatenated[,sigplot]))#PE_WE_P Proportional_verion
PE_WE.hs.round <- round(PE_WE.hs.round, digits=rounding_digits)
#View(PE_WE.hs.round)
#PE_WE.st_dev <- sd(biodiverse_results_concatenated$PE_WE)
#View(b.st_dev)
#b.hs.ceiling <- ceiling(b.hs)
PE_WE.max_val <- round(max(biodiverse_results_concatenated[,sigplot]), digits=3)
#View(max_val)
PE_WE.limits_set <- c(0,PE_WE.max_val+.0001)
#View(limits_set)
legend_text <- paste("Phylogenetic endemism", sep="")
p4 <- ggplot(data=df)+ xlim(-1900000, 2180000) + ylim(-5200000,-850000)+
geom_tile(aes_string(x=Axis_0, y=Axis_1, fill=sigplot)) + # using aes_string allows variables to be passed to ggplot
#scale_fill_continuous(limits = c(min(rast_p$Values),max(rast_p$Values)), breaks=b.hs.round, guide = guide_colorbar(nbin=100, draw.ulim = FALSE, draw.llim = FALSE)) +
#scale_fill_continuous(limits = limits_set, breaks=b.hs.round, guide = guide_colourbar(nbin=100, raster= TRUE, ticks = TRUE, draw.ulim = FALSE, draw.llim = FALSE)) +
scale_fill_gradientn(name = legend_text, limits = PE_WE.limits_set, colours = colours, breaks= PE_WE.hs.round, guide = guide_colourbar(direction = "horizontal", title.position = "bottom", title.hjust=0.5, title.vjust=0.1, label.position="bottom", label.hjust = 0.5, label.vjust = 0.5, raster=FALSE)) +
geom_polygon(data=map_data, aes(x=long, y=lat, group = group),colour="gray74", fill="transparent") +
coord_fixed() +
annotate("text", label = "d", x = -1700000, y = -1000000, size=rel(20), face = 'plain') +
annotate("rect", xmin = -750000, xmax = -250000, ymin = -4500000, ymax = -4550000, fill = "black", colour = "black", alpha = 1)+
annotate("rect", xmin = -250000, xmax = 250000, ymin = -4500000, ymax = -4550000, fill = "white", colour = "black", alpha = 1)+
annotate("text", label = "0", x = -750000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "500", x = -250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "1000", x = 250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "km", x = 620000, y = -4650000, size=rel(18),  face = 'plain') +
theme(
text = element_text(family = "HelvLight"),
strip.background = element_blank(),
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.text = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
#legend.background = element_rect(colour = "black", fill="transparent", size=1),
#legend.key =element_rect(colour = "black", fill="transparent", size=1),
legend.key.height = unit(1.1, "cm"),
legend.key.width = unit(6.2, "cm"),
legend.position=c(.5, 0.06),
legend.direction='horizontal',
legend.title = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
legend.text = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
panel.grid = element_blank(),
panel.background=element_blank(),#element_rect(colour = "black", fill="white", size = 1),
#panel.border = element_rect(colour = "black", fill=NA, size = 1),#element_blank(),
#panel.margin=unit(c(0,0,0,0),"line"),
plot.background=element_rect(colour = "black", fill="white", size = 1),
plot.margin=unit(c(0,0,-0.61,-0.61),"line"))
print(p4)
# Get the widths
gA <- ggplot_gtable(ggplot_build(p1))
gB <- ggplot_gtable(ggplot_build(p2))
gC <- ggplot_gtable(ggplot_build(p3))
gD <- ggplot_gtable(ggplot_build(p4))
maxWidth = unit.pmax(gA$widths[2:3], gB$widths[2:3], gC$widths[2:3], gD$widths[2:3])
# Set the widths
gA$widths[2:3] <- maxWidth
gB$widths[2:3] <- maxWidth
gC$widths[2:3] <- maxWidth
gD$widths[2:3] <- maxWidth
CairoPNG(width = 2323, height = 2479, file = "figure_1.png", canvas="white", bg = "white", units="px", dpi=72, title = "Figure 1") #
grid.arrange(gA, gB, gC, gD, nrow=2) # Arrange the four charts
dev.off()
CairoPDF(width = 36.74, height = 39.19, file = "figure_1.pdf", pointsize=40, bg = "white", title = "Figure 1", version = "1.7", paper = "special", pagecentre=TRUE) #
grid.arrange(gA, gB, gC, gD, nrow=2)  # Arrange the four charts
dev.off()
library(sp)             # classes for spatial data
library(maptools)    # and their dependencies
library(RColorBrewer)
library(rgdal)
library(grid)
#library(rgeos)
library(ggplot2)
library(gtable)
library(gridExtra)
library(Cairo)
#library(extrafont)
#library(maps)
#loadfonts()
getwd()
setwd("C:/biodiverse_pipeline/R_release/")#
#observed_data <- paste0("biodiverse_observed_data_export.csv")
#randomisation_results  <- paste0("biodiverse_randomised_data_export.csv")
observed_data <- choose.files(caption="Select the .csv with the biodiverse observed results")
randomisation_results <- choose.files(caption="Select the .csv with the biodiverse randomisation results", default=observed_data)
observed_data <- read.table(observed_data, header=T,sep=",")
randomisation_results <- read.table(randomisation_results, header=T,sep=",")
biodiverse_results_concatenated <- cbind(observed_data, randomisation_results)
biodiverse_results_concatenated<- biodiverse_results_concatenated[!is.na(biodiverse_results_concatenated[,4]),]#trim NA.s
#View(biodiverse_results_concatenated)
map_shape_file <- paste0("../shape_files/coastline_albers.shp")
map_data <- readShapePoly(map_shape_file)
#############################################################################
#
# functions for populating new columns with text of significance
#
#############################################################################
#Standard 2 tailed test for RPD
significance_fun <- function(x){
if (x >= 0.99) {
return("Very Highly Sig")
} else if (x >= 0.975){
return ("Highly Sig")
} else if (x <= 0.01){
return ("Very Sig Low")
} else if (x <= 0.025){
return ("Sig Low")
} else {
return("Not Sig")
}
}
#two pass test for RPE
# x=P_PE_WE_P, y=P_PHYLO_RPE_NULL2, z=P_PHYLO_RPE2
significance_super_fun <- function(x, y, z){
if (x < 0.95 & y < 0.95) {
return("Not Sig")
} else if (z <= 0.025){
return ("Neo")
} else if (z >= 0.975){
return ("Palaeo")
} else if (x >= 0.99 & y >= 0.99){
return ("Super")
} else {
return("Mixed")
}
}
###################################################################################
#
#Create new columns in dataframe and populate them using the functions above
#
###################################################################################
trait_index <- grep("^P_PHYLO_RPD1$", colnames(biodiverse_results_concatenated)) #get the index of the column with the trait
biodiverse_results_concatenated$P_PHYLO_RPD1_SIG <- apply(biodiverse_results_concatenated[trait_index],  MARGIN=c(1), significance_fun) # apply the function to every row of column with index "trait_index" and generate a column in the dataframe showing significant cells
trait_index <- grep("^P_PHYLO_RPD2$", colnames(biodiverse_results_concatenated)) #get the index of the column with the trait
biodiverse_results_concatenated$P_PHYLO_RPD2_SIG <- apply(biodiverse_results_concatenated[trait_index],  MARGIN=c(1), significance_fun) # apply the function to every row of column with index "trait_index" and generate a column in the dataframe showing significant cells
trait_index <- grep("^P_PD_P$", colnames(biodiverse_results_concatenated)) #get the index of the column with the trait
biodiverse_results_concatenated$P_PD_P_SIG <- apply(biodiverse_results_concatenated[trait_index],  MARGIN=c(1), significance_fun) # apply
trait_index <- grep("^P_PE_WE_P$", colnames(biodiverse_results_concatenated)) #get the index of the column with the trait
biodiverse_results_concatenated$P_PE_WE_P_SIG <- apply(biodiverse_results_concatenated[trait_index],  MARGIN=c(1), significance_fun) # apply
trait_index <- grep("^P_PD_P_per_taxon$", colnames(biodiverse_results_concatenated)) #get the index of the column with the trait
biodiverse_results_concatenated$P_PD_P_per_taxon_SIG <- apply(biodiverse_results_concatenated[trait_index],  MARGIN=c(1), significance_fun) # apply
trait_index <- grep("^P_PHYLO_RPE2$", colnames(biodiverse_results_concatenated)) #get the index of the column with the trait
biodiverse_results_concatenated$P_PHYLO_RPE2_ONE_STEP_SIG <- apply(biodiverse_results_concatenated[trait_index],  MARGIN=c(1), significance_fun) # apply the function to every row of column with index "trait_index" and generate a column in the dataframe showing significant cells
#This uses the 2 pass test to pull out palaeo, neo and super for RPE
biodiverse_results_concatenated$P_PHYLO_RPE1_SIG <- sapply(1:nrow(biodiverse_results_concatenated), function(x) significance_super_fun(biodiverse_results_concatenated$P_PE_WE_P[x], biodiverse_results_concatenated$P_PHYLO_RPE_NULL1[x], biodiverse_results_concatenated$P_PHYLO_RPE1[x]))
biodiverse_results_concatenated$P_PHYLO_RPE2_SIG <- sapply(1:nrow(biodiverse_results_concatenated), function(x) significance_super_fun(biodiverse_results_concatenated$P_PE_WE_P[x], biodiverse_results_concatenated$P_PHYLO_RPE_NULL2[x], biodiverse_results_concatenated$P_PHYLO_RPE2[x]))
#test <- subset(biodiverse_results_concatenated, ,select=c("Element", "P_PE_WE_P", "P_PD_P_SIG", "P_PHYLO_RPD_NULL1", "P_PHYLO_RPD1","P_PHYLO_RPE2_ONE_STEP_SIG", "P_PHYLO_RPE2_SIG"))
#
#View(test)
#sig_only <- subset(biodiverse_results_concatenated, !(P_PHYLO_RPE2_SIG=="Not Sig"),select=c("Element", "P_PE_WE_P", "P_PD_P_SIG", "P_PHYLO_RPD_NULL1", "P_PHYLO_RPD1","P_PHYLO_RPE2_ONE_STEP_SIG", "P_PHYLO_RPE2_SIG"))
#View(sig_only)
###############################################################################################
#
##########################################################
#
#
# Figure 1
#
#
############################################################
scaleAll <- FALSE
Axis_0 <- "Axis_0"
Axis_1 <- "Axis_1"
sigplot <- "ENDW_RICHNESS"
df <- biodiverse_results_concatenated
yellowOrangeBrown_colours <- brewer.pal(9, "YlOrBr")
colours <- yellowOrangeBrown_colours
legend_text <- paste("Species richness", sep="")
legend_position <- paste("top", sep="")
rounding_digits <- 0
#   Create vectors for legend text using the max and min vaules in the raster and a number in between
ENDW_RICHNESS.hs <- seq(0,max(biodiverse_results_concatenated[,sigplot]),length.out=5)
ENDW_RICHNESS.hs.round <- round(ENDW_RICHNESS.hs, digits=rounding_digits)
ENDW_RICHNESS.max_val <- round(max(biodiverse_results_concatenated[,sigplot]), digits=0)
ENDW_RICHNESS.limits_set <- c(0,ENDW_RICHNESS.max_val+0.1)
p1 <- ggplot(data=df)+ #xlim(-1900000, 2180000) + ylim(-4850000,-500000)+
geom_tile(aes_string(x=Axis_0, y=Axis_1, fill=sigplot)) + # using aes_string allows variables to be passed to ggplot
scale_fill_gradientn(name = legend_text, limits = ENDW_RICHNESS.limits_set, colours = colours, breaks= ENDW_RICHNESS.hs.round, guide = guide_colourbar(direction = "horizontal", title.position = "top", title.hjust=0.5, title.vjust=0.9, label.position="bottom", label.hjust = 0.5, label.vjust = 0.5, raster=FALSE)) + #
geom_polygon(data=map_data, aes(x=long, y=lat, group = group),colour="gray74", fill="transparent") +
coord_fixed() +
#annotate("text", label = "a", x = 2000000, y = -4750000, size=rel(20),  face = 'plain') +
annotate("rect", xmin = -750000, xmax = -250000, ymin = -4500000, ymax = -4550000, fill = "black", colour = "black", alpha = 1)+
annotate("rect", xmin = -250000, xmax = 250000, ymin = -4500000, ymax = -4550000, fill = "white", colour = "black", alpha = 1)+
annotate("text", label = "0", x = -750000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "500", x = -250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "1000", x = 250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "km", x = 620000, y = -4650000, size=rel(18),  face = 'plain') +
theme(strip.background = element_blank(),
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.text = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
#legend.background = element_rect(colour = "black", fill="transparent", size=1),
#legend.key = element_rect(colour = "black", fill="transparent", size=1),
legend.key.height = unit(1.1, "cm"),
legend.margin = unit(2, "cm"),
legend.key.width = unit(6.2, "cm"),
legend.position=c(.5, 0.93),
legend.direction='horizontal',
legend.title = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
legend.text = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
panel.grid = element_blank(),
panel.background=element_blank(),#element_rect(colour = "black", fill="white", size = 1),
#panel.border = element_rect(colour = "black", fill=NA, size = 1),#element_blank(),
#panel.margin=unit(c(0,0,0,0),"line"),
plot.background=element_rect(colour = "black", fill="white", size = 1),
plot.margin=unit(c(0,0,-0.61,-0.61),"line"))
print(p1)
# dev.off()# for writing to file
#
legend_text <- paste("Weighted endemism", sep="")
legend_position <- paste("top", sep="")
Axis_0 <- "Axis_0"
Axis_1 <- "Axis_1"
sigplot <- "ENDW_WE"
rounding_digits <- 2
yellowOrangeBrown_colours <- brewer.pal(9, "YlOrBr")
colours <- yellowOrangeBrown_colours
#   Create vectors for legend text using the max and min vaules in the raster and a number in between
#ENDW_WE.hs <- seq(0,max(biodiverse_results_concatenated$ENDW_WE),length.out=5)
#ENDW_WE.hs.round <- round(ENDW_WE.hs, digits=rounding_digits)
ENDW_WE.hs<- c(0, 0.5, 1, 1.5, 2, max(biodiverse_results_concatenated[,sigplot]))
ENDW_WE.hs.round <- round(ENDW_WE.hs, digits=rounding_digits)
#View(b.hs.round)
#ENDW_WE.st_dev <- sd(biodiverse_results_concatenated$ENDW_WE)
#View(b.st_dev)
#ENDW_WE.hs.ceiling <- ceiling(ENDW_WE.hs.round)
ENDW_WE.max_val <- round(max(biodiverse_results_concatenated[,sigplot]), digits=2)
#View(max_val)
ENDW_WE.limits_set <- c(0,ENDW_WE.max_val+0.01)
#View(limits_set)
df <- biodiverse_results_concatenated
p2 <- ggplot(data=df)+ xlim(-1900000, 2180000) + ylim(-4850000,-500000)+
geom_tile(aes_string(x=Axis_0, y=Axis_1, fill=sigplot)) + # using aes_string allows variables to be passed to ggplot
#scale_fill_continuous(limits = c(min(rast_p$Values),max(rast_p$Values)), breaks=b.hs.round, guide = guide_colorbar(nbin=100, draw.ulim = FALSE, draw.llim = FALSE)) +
#scale_fill_continuous(limits = limits_set, breaks=b.hs.round, guide = guide_colourbar(nbin=100, raster= TRUE, ticks = TRUE, draw.ulim = FALSE, draw.llim = FALSE)) +
scale_fill_gradientn(name = legend_text, limits = ENDW_WE.limits_set, colours = colours, breaks= ENDW_WE.hs.round,  guide = guide_colourbar(direction = "horizontal", title.position = "top",  title.hjust=0.5, title.vjust=0.99, label.position="bottom", label.hjust = 0.5, label.vjust = 0.5, raster=FALSE)) + #
geom_polygon(data=map_data, aes(x=long, y=lat, group = group),colour="gray74", fill="transparent") +
coord_fixed() +
annotate("text", label = "b", x = -1700000, y = -4750000, size =rel(20), face = 'plain', ) +
annotate("rect", xmin = -750000, xmax = -250000, ymin = -4500000, ymax = -4550000, fill = "black", colour = "black", alpha = 1)+
annotate("rect", xmin = -250000, xmax = 250000, ymin = -4500000, ymax = -4550000, fill = "white", colour = "black", alpha = 1)+
annotate("text", label = "0", x = -750000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "500", x = -250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "1000", x = 250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "km", x = 620000, y = -4650000, size=rel(18),  face = 'plain') +
theme(
text = element_text(family = "HelvLight"),
strip.background = element_blank(),
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.text = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
#legend.background = element_rect(colour = "black", fill="transparent", size=1),
#legend.key =element_rect(colour = "black", fill="transparent", size=1),
legend.key.height = unit(1.1, "cm"),
legend.key.width = unit(6.2, "cm"),
legend.position=c(.5, 0.93),
legend.direction='horizontal',
legend.title = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
legend.text = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
panel.grid = element_blank(),
panel.background=element_blank(),#element_rect(colour = "black", fill="white", size = 1),
#panel.border = element_rect(colour = "black", fill=NA, size = 1),#element_blank(),
#panel.margin=unit(c(0,0,0,0),"line"),
plot.background=element_rect(colour = "black", fill="white", size = 1),
plot.margin=unit(c(0,0,-0.61,-0.61),"line"))
print(p2)
Axis_0 <- "Axis_0"
Axis_1 <- "Axis_1"
sigplot <- "PD_P"
df <- biodiverse_results_concatenated
rounding_digits <- 3
yellowOrangeBrown_colours <- brewer.pal(9, "YlOrBr")
colours <- yellowOrangeBrown_colours
#   Create vectors for legend text using the max and min vaules in the raster and a number in between
PD.hs <- seq(0,max(biodiverse_results_concatenated[,sigplot]),length.out=5) #PD_P version
PD.hs.round <- round(PD.hs, digits=rounding_digits)
#PD.hs.round <- c(0, 0.5, 1, max(biodiverse_results_concatenated[,sigplot])) #PD version
#PD.hs.round <- round(PD.hs.round, digits=rounding_digits)
#View(PD.hs.round)
#PD.st_dev <- sd(biodiverse_results_concatenated$PD)
#View(b.st_dev)
#b.hs.ceiling <- ceiling(b.hs)
PD.max_val <- round(max(biodiverse_results_concatenated[,sigplot]), digits=3)
#View(max_val)
PD.limits_set <- c(0,PD.max_val+0.001)
#View(limits_set)
legend_text <- paste("Phylogenetic diversity", sep="")
legend_position <- paste("bottom", sep="")
p3 <- ggplot(data=df)+ xlim(-1900000, 2180000) + ylim(-5200000,-850000)+  #coord_equal()+scale_x_continuous("")+scale_y_continuous("")+
geom_tile(aes_string(x=Axis_0, y=Axis_1, fill=sigplot)) + # using aes_string allows variables to be passed to ggplot
#scale_fill_continuous(limits = c(min(rast_p$Values),max(rast_p$Values)), breaks=b.hs.round, guide = guide_colorbar(nbin=100, draw.ulim = FALSE, draw.llim = FALSE)) +
#scale_fill_continuous(limits = limits_set, breaks=b.hs.round, guide = guide_colourbar(nbin=100, raster= TRUE, ticks = TRUE, draw.ulim = FALSE, draw.llim = FALSE)) +
scale_fill_gradientn(name = legend_text, limits = PD.limits_set, colours = colours, breaks= PD.hs.round, guide = guide_colourbar(direction = "horizontal", title.position = "bottom", title.hjust=0.5, title.vjust=0.1, label.position="bottom", label.hjust = 0.5, label.vjust = 0.5, raster=FALSE)) +
geom_polygon(data=map_data, aes(x=long, y=lat, group = group),colour="gray74", fill="transparent") +
coord_fixed() +
annotate("text", label = "c", x =  2000000, y = -1000000, size=rel(20), face = 'plain') +
annotate("rect", xmin = -750000, xmax = -250000, ymin = -4500000, ymax = -4550000, fill = "black", colour = "black", alpha = 1)+
annotate("rect", xmin = -250000, xmax = 250000, ymin = -4500000, ymax = -4550000, fill = "white", colour = "black", alpha = 1)+
annotate("text", label = "0", x = -750000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "500", x = -250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "1000", x = 250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "km", x = 620000, y = -4650000, size=rel(18),  face = 'plain') +
theme(
text = element_text(family = "HelvLight"),
strip.background = element_blank(),
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.text = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
#legend.background = element_rect(colour = "black", fill="transparent", size=1),
#legend.key =element_rect(colour = "black", fill="transparent", size=1),
legend.key.height = unit(1.1, "cm"),
legend.key.width = unit(6.2, "cm"),
legend.position=c(.5, 0.06),
legend.direction='horizontal',
legend.title = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
legend.text = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
panel.grid = element_blank(),
panel.background=element_blank(),#element_rect(colour = "black", fill="white", size = 1),
#panel.border = element_rect(colour = "black", fill=NA, size = 1),#element_blank(),
#panel.margin=unit(c(0,0,0,0),"line"),
plot.background=element_rect(colour = "black", fill="white", size = 1),
plot.margin=unit(c(0,0,-0.61,-0.61),"line"))
print(p3)
Axis_0 <- "Axis_0"
Axis_1 <- "Axis_1"
sigplot <- "PE_WE_P"
df <- biodiverse_results_concatenated
rounding_digits <- 3
yellowOrangeBrown_colours <- brewer.pal(9, "YlOrBr")
colours <- yellowOrangeBrown_colours
#   Create vectors for legend text using the max and min vaules in the raster and a number in between
#PE_WE.hs <- seq(0,max(biodiverse_results_concatenated[,sigplot]),length.out=5)
#PE_WE.hs.round <- round(PE_WE.hs, digits=rounding_digits)
#PE_WE.hs.round <- c(0,  0.02, 0.04, max(biodiverse_results_concatenated[,sigplot]))#PE_WE version
PE_WE.hs.round <- c(0,  0.002, 0.004, max(biodiverse_results_concatenated[,sigplot]))#PE_WE_P Proportional_verion
PE_WE.hs.round <- round(PE_WE.hs.round, digits=rounding_digits)
#View(PE_WE.hs.round)
#PE_WE.st_dev <- sd(biodiverse_results_concatenated$PE_WE)
#View(b.st_dev)
#b.hs.ceiling <- ceiling(b.hs)
PE_WE.max_val <- round(max(biodiverse_results_concatenated[,sigplot]), digits=3)
#View(max_val)
PE_WE.limits_set <- c(0,PE_WE.max_val+.0001)
#View(limits_set)
legend_text <- paste("Phylogenetic endemism", sep="")
p4 <- ggplot(data=df)+ xlim(-1900000, 2180000) + ylim(-5200000,-850000)+
geom_tile(aes_string(x=Axis_0, y=Axis_1, fill=sigplot)) + # using aes_string allows variables to be passed to ggplot
#scale_fill_continuous(limits = c(min(rast_p$Values),max(rast_p$Values)), breaks=b.hs.round, guide = guide_colorbar(nbin=100, draw.ulim = FALSE, draw.llim = FALSE)) +
#scale_fill_continuous(limits = limits_set, breaks=b.hs.round, guide = guide_colourbar(nbin=100, raster= TRUE, ticks = TRUE, draw.ulim = FALSE, draw.llim = FALSE)) +
scale_fill_gradientn(name = legend_text, limits = PE_WE.limits_set, colours = colours, breaks= PE_WE.hs.round, guide = guide_colourbar(direction = "horizontal", title.position = "bottom", title.hjust=0.5, title.vjust=0.1, label.position="bottom", label.hjust = 0.5, label.vjust = 0.5, raster=FALSE)) +
geom_polygon(data=map_data, aes(x=long, y=lat, group = group),colour="gray74", fill="transparent") +
coord_fixed() +
annotate("text", label = "d", x = -1700000, y = -1000000, size=rel(20), face = 'plain') +
annotate("rect", xmin = -750000, xmax = -250000, ymin = -4500000, ymax = -4550000, fill = "black", colour = "black", alpha = 1)+
annotate("rect", xmin = -250000, xmax = 250000, ymin = -4500000, ymax = -4550000, fill = "white", colour = "black", alpha = 1)+
annotate("text", label = "0", x = -750000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "500", x = -250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "1000", x = 250000, y = -4650000, size=rel(18),  face = 'plain') +
annotate("text", label = "km", x = 620000, y = -4650000, size=rel(18),  face = 'plain') +
theme(
text = element_text(family = "HelvLight"),
strip.background = element_blank(),
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.text = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
#legend.background = element_rect(colour = "black", fill="transparent", size=1),
#legend.key =element_rect(colour = "black", fill="transparent", size=1),
legend.key.height = unit(1.1, "cm"),
legend.key.width = unit(6.2, "cm"),
legend.position=c(.5, 0.06),
legend.direction='horizontal',
legend.title = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
legend.text = element_text(colour = 'black', angle = 0, size=rel(4), face = 'plain'),
panel.grid = element_blank(),
panel.background=element_blank(),#element_rect(colour = "black", fill="white", size = 1),
#panel.border = element_rect(colour = "black", fill=NA, size = 1),#element_blank(),
#panel.margin=unit(c(0,0,0,0),"line"),
plot.background=element_rect(colour = "black", fill="white", size = 1),
plot.margin=unit(c(0,0,-0.61,-0.61),"line"))
print(p4)
# Get the widths
gA <- ggplot_gtable(ggplot_build(p1))
gB <- ggplot_gtable(ggplot_build(p2))
gC <- ggplot_gtable(ggplot_build(p3))
gD <- ggplot_gtable(ggplot_build(p4))
maxWidth = unit.pmax(gA$widths[2:3], gB$widths[2:3], gC$widths[2:3], gD$widths[2:3])
# Set the widths
gA$widths[2:3] <- maxWidth
gB$widths[2:3] <- maxWidth
gC$widths[2:3] <- maxWidth
gD$widths[2:3] <- maxWidth
CairoPNG(width = 2323, height = 2479, file = "figure_1.png", canvas="white", bg = "white", units="px", dpi=72, title = "Figure 1") #
grid.arrange(gA, gB, gC, gD, nrow=2) # Arrange the four charts
dev.off()
[create_bts.pl]: figures/img.png "Title"
[header identifiers](#create_bts.pl).
+ [convert_csv_to_metres](#convert_csv_to_metres)
* Scripts to run the analyses
+ [convert_csv_to_metres](#convert_csv_to_metres)
##########################################################################################################
#
#This script checks and installs a number of packages if they are not already installed on the system
#to use it just select all of the text and run it in R. It basically speeds up the process of getting an R install up and running so you don't need to manually install packages.
#
#Nunzio.Knerr@csiro.au
#Date:26/05/2014
#
##########################################################################################################
#
#below is a list of packages to check and install
#
stdpkgs <- c("sp", "maptools", "XML", "RSAGA", "rgdal", "rgeos", "raster", "plyr", "dplyr", "tidyr", "ggplot2", "RColorBrewer", "colorspace", "colorRamps", "spacetime", "aqp", "spatstat", "scales", "stringr", "gWidgets", "phytools", "ape", "apTreeshape")
otherpkgs <- c("plotKML")
#
#Do not edit below
#check and install libraries
# script to install needed packages for R Windows
#  -- set CRAN mirror locally
#setInternet2() # this sets an alternative internet. good for proxy if stupid intenet blocking is done
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.csiro.au/"
options(repos=r)
})
allpkgs <- union(stdpkgs, otherpkgs)
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
lapply(allpkgs, pkgTest)
##########################################################################################################
#
#This script uses a perl script to open biodiverse file and tree file and trime each to match eachother.
#Inputs:
#input_bds_file = "C:/GIS-Datasets/pipeline_test/test_hornworts.bds"
#input_bts_file = "C:/GIS-Datasets/pipeline_test/tree.bts"
#output_bds_file = "C:/GIS-Datasets/pipeline_test/test_hornworts_trimmed.bds"
#output_bts_file = "C:/GIS-Datasets/pipeline_test/tree_trimmed.bts"
#
#Nunzio.Knerr@csiro.au
#Date:26/05/2014
#
##########################################################################################################
#  Should be set on system, but useful for portabilty to other systems
#Sys.setenv(PATH="C:/strawberry/perl/bin;c:/strawberry/c/bin;%PATH%") #set path to srawberryperl for 64 bit version
#Sys.setenv(PERL5LIB="C:/biodiverse/lib")
source("./R_release/biodiverse_path_reference.R")
cmd <- paste ("perl ", biodiverse_pipeline_install_folder, "perl/trim_bds_and_bts.pl", sep="")
input_bds_file <- "./pipeline_test/test_hornworts_epsg_3577.bds"
input_bts_file <- "./pipeline_test/tree.bts"
output_bds_file <- "./pipeline_test/test_hornworts_trimmed.bds"
output_bts_file <- "./pipeline_test/tree_trimmed.bts"
###### do not edit below #########
cmd = paste (cmd, "--input_bds_file", shQuote(input_bds_file ), "--input_bts_file", shQuote(input_bts_file), "--output_bds_file", shQuote(output_bds_file), "--output_bts_file", shQuote(output_bts_file))
system(cmd, intern=FALSE, ignore.stdout=FALSE, ignore.stderr=FALSE, wait=TRUE)
